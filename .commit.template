 (#):
# ↑↑↑ タイトルを 1行 50 字以内で記述してください ↑↑↑
#        タイトルだけで内容が把握できるように何(What)をしたかを短い文章にする。
#
# [要約](#[イシュー番号]):[タイトル]
# ex) fix(#123):ループカウンタ初期化もれを修正
#
# 要約は以下を使用すること。
# feature : 新しい機能
# fix     : バグの修正
# docs    : ドキュメントのみの変更
# style   : 空白、フォーマット、セミコロン追加など
# refactor: 仕様に影響がないコード改善(リファクタ)
# perf    : パフォーマンス向上関連
# test    : テスト関連
# chore   : ビルド、補助ツール、ライブラリ関連

# ↓↓↓ なぜ(Why)を以降の本文に記述してください ↓↓↓ 
#-------------------------------------------------------

# 機能仕様書を修正した場合は、「変更シートNo.」「変更前」「変更後」を記載する
# (diffが取りづらいため＝どうやっての部分を理解するのに変更箇所を明確にするため)
# 
# Gitを使うことでソースコードへの変更理由について5W1Hに沿った変更履歴を知ることが理想
# ・いつ(When)     :タイムスタンプで分かる
# ・どこで(Where)  :ファイル名とディレクトリで分かる
# ・誰が(Who)      :author（作者）で分かる
# ・何を(What)     :コミットメッセージのタイトルと本文で分かる(ようにする)
# ・なぜ(Why)      :コミットメッセージの本文で分かる(ようにする)
# ・どうやって(How):コードやdiffで分かる
# つまり、「何を」と「なぜ」をしっかりコミットメッセージに記載する
